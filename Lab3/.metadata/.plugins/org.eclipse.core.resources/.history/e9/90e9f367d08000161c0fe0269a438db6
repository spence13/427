<<<<<<< HEAD
/*
 * tank.c
 *
 *  Created on: Sep 21, 2016
 *      Author: superman
 */
#include "tank.h"

#define GREEN 0x0000FF00
#define BLACK 0
#define DOUBLE 2
#define SHIFT_VAL 4
#define MIN_X 0
#define MAX_X 640
#define HEIGHT 420

// Packs each horizontal line of the figures into a single 32 bit word.
#define packword15(b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0) \
((b14 << 14) | (b13 << 13) | (b12 << 12) | (b11 << 11) | (b10 << 10) | (b9  << 9 ) | (b8  << 8 ) |	\
 (b7  << 7 ) | (b6  << 6 ) | (b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ))

static const int tank_15x8[] = // This is the pixel pattern for the tank
{
	packword15(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),
	packword15(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0),
	packword15(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0),
	packword15(0,1,1,1,1,1,1,1,1,1,1,1,1,1,0),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
};

static int tank_x_position = 320; // Top left corner of the tank


int get_tank(int row){ // Returns the value of the tank at a certain row
	return tank_15x8[row];
}

int get_tank_x_position(){ // Getter function for the global x position
	return tank_x_position;
}

void set_tank_x_position(int x_pos){ // Setter function for the global x position
	tank_x_position = x_pos;
}

void draw_tank(unsigned int * framePointer)
{
    int x, y;
    for(y=0; y < 8; y++){
		for(x=0; x < 15; x++){
			 if(get_tank(y) & (1<<x)){
				 framePointer[(HEIGHT+(DOUBLE*y))*MAX_X + tank_x_position + (2*x)] = GREEN;
				 framePointer[(HEIGHT+(DOUBLE*y)+1)*MAX_X + tank_x_position + (2*x)] = GREEN;
				 framePointer[(HEIGHT+(DOUBLE*y))*MAX_X + tank_x_position + (2*x)+1] = GREEN;
				 framePointer[(HEIGHT+(DOUBLE*y)+1)*MAX_X + tank_x_position + (2*x)+1] = GREEN;
			 }
		}
    }
}

void erase_tank(unsigned int * framePointer)
{
    int x, y;
    for(y=0; y < 8; y++){
		for(x=0; x < 15; x++){
			 if(get_tank(y) & (1<<x)){
				 framePointer[(HEIGHT+(DOUBLE*y))*MAX_X + tank_x_position + (2*x)] = BLACK;
				 framePointer[(HEIGHT+(DOUBLE*y)+1)*MAX_X + tank_x_position + (2*x)] = BLACK;
				 framePointer[(HEIGHT+(DOUBLE*y))*MAX_X + tank_x_position + (2*x)+1] = BLACK;
				 framePointer[(HEIGHT+(DOUBLE*y)+1)*MAX_X + tank_x_position + (2*x)+1] = BLACK;
			 }
		}
    }
}

void tank_shift_left(unsigned int * framePointer)
{
	erase_tank(framePointer);

	tank_x_position = tank_x_position-SHIFT_VAL;
	if (tank_x_position < MIN_X)
		tank_x_position = MIN_X;

	draw_tank(framePointer);
}

void tank_shift_right(unsigned int * framePointer)
{
	erase_tank(framePointer);

	tank_x_position = tank_x_position+SHIFT_VAL;
	if (tank_x_position > MAX_X-30)
		tank_x_position = MAX_X-30;

	draw_tank(framePointer);
}


=======
/*
 * tank.c
 *
 *  Created on: Sep 21, 2016
 *      Author: superman
 */
#include "tank.h"

#define GREEN 0x0000FF00
#define BLACK 0
#define DOUBLE 2
#define SHIFT_VAL 4
#define MIN_X 0
#define MAX_X 640
#define HEIGHT 420

// Packs each horizontal line of the figures into a single 32 bit word.
#define packword15(b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0) \
((b14 << 14) | (b13 << 13) | (b12 << 12) | (b11 << 11) | (b10 << 10) | (b9  << 9 ) | (b8  << 8 ) |	\
 (b7  << 7 ) | (b6  << 6 ) | (b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ))

static const int tank_15x8[] = // This is the pixel pattern for the tank
{
	packword15(0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),
	packword15(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0),
	packword15(0,0,0,0,0,0,1,1,1,0,0,0,0,0,0),
	packword15(0,1,1,1,1,1,1,1,1,1,1,1,1,1,0),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
	packword15(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
};

static int tank_x_position = 320; // Top left corner of the tank


int get_tank(int row){ // Returns the value of the tank at a certain row
	return tank_15x8[row];
}

int get_tank_x_position(){ // Getter function for the global x position
	return tank_x_position;
}

void set_tank_x_position(int x_pos){ // Setter function for the global x position
	tank_x_position = x_pos;
}

void draw_tank(unsigned int * framePointer)
{
    int x, y;
    for(y=0; y < 8; y++){
		for(x=0; x < 15; x++){
			 if(get_tank(y) & (1<<x)){
				 framePointer[(HEIGHT+(DOUBLE*y))*MAX_X + tank_x_position + (2*x)] = GREEN;
				 framePointer[(HEIGHT+(DOUBLE*y)+1)*MAX_X + tank_x_position + (2*x)] = GREEN;
				 framePointer[(HEIGHT+(DOUBLE*y))*MAX_X + tank_x_position + (2*x)+1] = GREEN;
				 framePointer[(HEIGHT+(DOUBLE*y)+1)*MAX_X + tank_x_position + (2*x)+1] = GREEN;
			 }
		}
    }
}

void erase_tank(unsigned int * framePointer)
{
    int x, y;
    for(y=0; y < 8; y++){
		for(x=0; x < 15; x++){
			 if(get_tank(y) & (1<<x)){
				 framePointer[(HEIGHT+(DOUBLE*y))*MAX_X + tank_x_position + (2*x)] = BLACK;
				 framePointer[(HEIGHT+(DOUBLE*y)+1)*MAX_X + tank_x_position + (2*x)] = BLACK;
				 framePointer[(HEIGHT+(DOUBLE*y))*MAX_X + tank_x_position + (2*x)+1] = BLACK;
				 framePointer[(HEIGHT+(DOUBLE*y)+1)*MAX_X + tank_x_position + (2*x)+1] = BLACK;
			 }
		}
    }
}

void tank_shift_left(unsigned int * framePointer)
{
	erase_tank(framePointer);

	tank_x_position = tank_x_position-SHIFT_VAL;
	if (tank_x_position < MIN_X)
		tank_x_position = MIN_X;

	draw_tank(framePointer);
}

void tank_shift_right(unsigned int * framePointer)
{
	erase_tank(framePointer);

	tank_x_position = tank_x_position+SHIFT_VAL;
	if (tank_x_position > MAX_X-30)
		tank_x_position = MAX_X-30;

	draw_tank(framePointer);
}


>>>>>>> 46133ae2d6a022a717e89ee90e8959352f12048c
