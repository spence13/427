<<<<<<< HEAD
/*
 * bunker.c
 *
 *  Created on: Sep 22, 2016
 *      Author: superman
 */

#include "bunker.h"
#include "globals.h"


#define BUNKER_COLS 4 //Number of columns of blocks we use for the bunker
// Packs each horizontal line of the figures into a single 24 bit word.
#define packword24(b23,b22,b21,b20,b19,b18,b17,b16,b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0) \
((b23 << 23) | (b22 << 22) | (b21 << 21) | (b20 << 20) | (b19 << 19) | (b18 << 18) | (b17 << 17) | (b16 << 16) |  \
 (b15 << 15) | (b14 << 14) | (b13 << 13) | (b12 << 12) | (b11 << 11) | (b10 << 10) | (b9  << 9 ) | (b8  << 8 ) | \
 (b7  << 7 ) | (b6  << 6 ) | (b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )

// Packs each horizontal line of the figures into a single 6 bit word.
#define packword6(b5,b4,b3,b2,b1,b0) \
((b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )

// Shape of the entire bunker.
static const int bunker_24x18[] =
{
packword24(0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0),
packword24(0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0),
packword24(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1)
};

// These are the blocks that comprise the bunker and each time a bullet
// strikes one of these blocks, you erode the block as you sequence through
// these patterns.
static const int bunkerDamage0_6x6[] =
{
packword6(0,1,1,0,0,0),
packword6(0,0,0,0,0,1),
packword6(1,1,0,1,0,0),
packword6(1,0,0,0,0,0),
packword6(0,0,1,1,0,0),
packword6(0,0,0,0,1,0)
};

static const int bunkerDamage1_6x6[] =
{
packword6(1,1,1,0,1,0),
packword6(1,0,1,0,0,1),
packword6(1,1,0,1,1,1),
packword6(1,0,0,0,0,0),
packword6(0,1,1,1,0,1),
packword6(0,1,1,0,1,0)
};

static const int bunkerDamage2_6x6[] =
{
packword6(1,1,1,1,1,1),
packword6(1,0,1,1,0,1),
packword6(1,1,0,1,1,1),
packword6(1,1,0,1,1,0),
packword6(0,1,1,1,0,1),
packword6(1,1,1,1,1,1)
};

static const int bunkerDamage3_6x6[] =
{
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1)
};

int bunker_erosion_block_state[4] = {0,0,0,0}; //This will keep track of what state of erosion each bunker is in
int bunker_erode_y_pos = 0;//keeps track of which section of the bunker to erode
int bunker_erode_x_pos = 0;//keeps track of which section of the bunker to erode
int bunker_damage_to_use[6] = {0};//keeps track of which bunker damage level to implement
//2x2 matrix to keep track of erosion state for each section of each bunker. 4 bunkers, 10 sections for each bunker
int erosion_state[4][10] = {
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
};

//function to return bunker bits
int bunker_get_bunker_bits(int row)
{
	return bunker_24x18[row];
}

//first erosion state
int bunker_get_bunker_damage0_bits(int row)
{
	return bunkerDamage0_6x6[row];
}

//second erosion state
int bunker_get_bunker_damage1_bits(int row)
{
	return bunkerDamage1_6x6[row];
}

//third erosion state
int bunker_get_bunker_damage2_bits(int row)
{
	return bunkerDamage2_6x6[row];
}

//fourth and last erosion state
int bunker_get_bunker_damage3_bits(int row)
{
	return bunkerDamage3_6x6[row];
}

//get the correct erosion state to use depending on how much youre eroded already
int bunker_get_damage_to_use_bits(int row)
{
	return bunker_damage_to_use[row];
}

//function to draw the bunkers
void bunker_draw(unsigned int * framePointer)
{
    int bunker_x_pos;//tracks position of frame buffer on bunker
    //loop through and draw entire bunker
    for(bunker_x_pos = GLOBALS_LEFT_BUNKER_START_PIXEL; bunker_x_pos < GLOBALS_MAX_X; bunker_x_pos=bunker_x_pos + GLOBALS_BUNKER_PIX_SEPARATION){
        int x, y;
        for(y=0; y < 18; y++){//all 18 y coordinate pixels
    		for(x=0; x < 32; x++){//all 32 x coordinate pixels
    			 if(bunker_get_bunker_bits(y) & (1<<x)){//draw if the pixel is a 1
    				 framePointer[(GLOBALS_BUNKER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + bunker_x_pos + (GLOBALS_DOUBLE*x)] = GLOBALS_GREEN;//draw green at frame pointer
    				 framePointer[(GLOBALS_BUNKER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + bunker_x_pos + (GLOBALS_DOUBLE*x)] = GLOBALS_GREEN;//draw green at frame pointer
    				 framePointer[(GLOBALS_BUNKER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + bunker_x_pos + (GLOBALS_DOUBLE*x)+1] = GLOBALS_GREEN;//draw green at frame pointer
    				 framePointer[(GLOBALS_BUNKER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + bunker_x_pos + (GLOBALS_DOUBLE*x)+1] = GLOBALS_GREEN;//draw green at frame pointer
    			 }
    		}
        }
    }
}

//calculate which section of bunker to erode
void bunker_get_erosion_block(int erosion_block)
{
	//there are 10 possibilities of erosion sections
	switch(erosion_block)
	{
		case 0:// top row	far left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_1;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_1;//save global var as preset constant for x pos
			break;
		case 1:// top row	left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_1;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_2;//save global var as preset constant for x pos
			break;
		case 2:// top row right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_1;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_3;//save global var as preset constant for x pos
			break;
		case 3:// top row	far right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_1;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_4;//save global var as preset constant for x pos
			break;
		case 4://middle row		far left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_2;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_1;//save global var as preset constant for x pos
			break;
		case 5://middle row		left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_2;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_2;//save global var as preset constant for x pos
			break;
		case 6://middle row	right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_2;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_3;//save global var as preset constant for x pos
			break;
		case 7://middle row		far right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_2;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_4;//save global var as preset constant for x pos
			break;
		case 8://bottom row		left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_3;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_1;//save global var as preset constant for x pos
			break;
		case 9://bottom row 	right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_3;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_4;//save global var as preset constant for x pos
			break;
		default:
			break;
	}
}

//calculate which bunker(1-4) to erode
void bunker_get_erosion_bunker_num(int bunker_number)
{
	//four possibilites of different bunkers
	switch(bunker_number)
	{
		case 0:
			bunker_erode_x_pos = bunker_erode_x_pos;//change x pos depending on which bunker to erode (far left)
			break;
		case 1:
			bunker_erode_x_pos = bunker_erode_x_pos + GLOBALS_BUNKER_PIX_SEPARATION;//change x pos depending on which bunker to erode (left)
			break;
		case 2:
			bunker_erode_x_pos = bunker_erode_x_pos + GLOBALS_BUNKER_PIX_SEPARATION*2;//change x pos depending on which bunker to erode (right)
			break;
		case 3:
			bunker_erode_x_pos = bunker_erode_x_pos + GLOBALS_BUNKER_PIX_SEPARATION*3;//change x pos depending on which bunker to erode (far right)
			break;
		default:
			break;
	}
}

//calculate what the next state of erosion needs to be
void bunker_get_erosion_state(int erosion_state)
{
	//four possibilites for which erosion state
	switch(erosion_state)
	{
		case 0://first erosion
		{
			int i;
			for(i=0; i<6; i++){
				bunker_damage_to_use[i] = bunkerDamage0_6x6[i];//save bits of correct erosion state
			}
			break;
		}
		case 1://second erosion
		{
			int i;
			for(i=0; i<6; i++){
				bunker_damage_to_use[i] = bunkerDamage1_6x6[i];//save bits of correct erosion state
			}
			break;
		}
		case 2://third erosion state
		{
			int i;
			for(i=0; i<6; i++){
				bunker_damage_to_use[i] = bunkerDamage2_6x6[i];//save bits of correct erosion state
			}
			break;
		}
		case 3://final erosion state
		{
			int i;
			for(i=0; i<6; i++){
				bunker_damage_to_use[i] = bunkerDamage3_6x6[i];//save bits of correct erosion state
			}
			break;
		}
		default:
			break;
	}
}


//draw the appropriate erosion state at correct section and bunker
void bunker_erode(unsigned int * framePointer, int bunker_number)
{
	int erosion_block = bunker_erosion_block_state[bunker_number]/BUNKER_COLS;
	if (erosion_block >= 10)
		return;

	bunker_get_erosion_block(erosion_block);//get correct erosion section
	bunker_get_erosion_bunker_num(bunker_number);//get correct bunker(1-4)
	bunker_get_erosion_state(erosion_state[bunker_number][erosion_block]);//get correct erosion state

    int x, y;
    for(y=0; y < 6; y++){//go through all 6 y coordinates of erosion block
		for(x=0; x < 6; x++){//go through all 6 x coordinates of erosion block
			 if(bunker_get_damage_to_use_bits(y) & (1<<x)){//only draw if pixel is a 1
				 framePointer[(bunker_erode_y_pos+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + bunker_erode_x_pos + (GLOBALS_DOUBLE*x)] = GLOBALS_BLACK;//draw black on erosion block
				 framePointer[(bunker_erode_y_pos+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + bunker_erode_x_pos + (GLOBALS_DOUBLE*x)] = GLOBALS_BLACK;//draw black on erosion block
				 framePointer[(bunker_erode_y_pos+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + bunker_erode_x_pos + (GLOBALS_DOUBLE*x)+1] = GLOBALS_BLACK;//draw black on erosion block
				 framePointer[(bunker_erode_y_pos+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + bunker_erode_x_pos + (GLOBALS_DOUBLE*x)+1] = GLOBALS_BLACK;//draw black on erosion block
			 }
		}
    }
    erosion_state[bunker_number][erosion_block] = erosion_state[bunker_number][erosion_block] + 1;//incremement correct index of 2x2 matrix to get to next erosion state

	bunker_erosion_block_state[bunker_number] += 1;
}

=======
/*
 * bunker.c
 *
 *  Created on: Sep 22, 2016
 *      Author: superman
 */

#include "bunker.h"
#include "globals.h"


#define BUNKER_COLS 4 //Number of columns of blocks we use for the bunker
// Packs each horizontal line of the figures into a single 24 bit word.
#define packword24(b23,b22,b21,b20,b19,b18,b17,b16,b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0) \
((b23 << 23) | (b22 << 22) | (b21 << 21) | (b20 << 20) | (b19 << 19) | (b18 << 18) | (b17 << 17) | (b16 << 16) |  \
 (b15 << 15) | (b14 << 14) | (b13 << 13) | (b12 << 12) | (b11 << 11) | (b10 << 10) | (b9  << 9 ) | (b8  << 8 ) | \
 (b7  << 7 ) | (b6  << 6 ) | (b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )

// Packs each horizontal line of the figures into a single 6 bit word.
#define packword6(b5,b4,b3,b2,b1,b0) \
((b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )

// Shape of the entire bunker.
static const int bunker_24x18[] =
{
packword24(0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0),
packword24(0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0),
packword24(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1),
packword24(1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1)
};

// These are the blocks that comprise the bunker and each time a bullet
// strikes one of these blocks, you erode the block as you sequence through
// these patterns.
static const int bunkerDamage0_6x6[] =
{
packword6(0,1,1,0,0,0),
packword6(0,0,0,0,0,1),
packword6(1,1,0,1,0,0),
packword6(1,0,0,0,0,0),
packword6(0,0,1,1,0,0),
packword6(0,0,0,0,1,0)
};

static const int bunkerDamage1_6x6[] =
{
packword6(1,1,1,0,1,0),
packword6(1,0,1,0,0,1),
packword6(1,1,0,1,1,1),
packword6(1,0,0,0,0,0),
packword6(0,1,1,1,0,1),
packword6(0,1,1,0,1,0)
};

static const int bunkerDamage2_6x6[] =
{
packword6(1,1,1,1,1,1),
packword6(1,0,1,1,0,1),
packword6(1,1,0,1,1,1),
packword6(1,1,0,1,1,0),
packword6(0,1,1,1,0,1),
packword6(1,1,1,1,1,1)
};

static const int bunkerDamage3_6x6[] =
{
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1),
packword6(1,1,1,1,1,1)
};

int bunker_erosion_block_state[4] = {0,0,0,0}; //This will keep track of what state of erosion each bunker is in
int bunker_erode_y_pos = 0;//keeps track of which section of the bunker to erode
int bunker_erode_x_pos = 0;//keeps track of which section of the bunker to erode
int bunker_damage_to_use[6] = {0};//keeps track of which bunker damage level to implement
//2x2 matrix to keep track of erosion state for each section of each bunker. 4 bunkers, 10 sections for each bunker
int erosion_state[4][10] = {
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
};

//function to return bunker bits
int bunker_get_bunker_bits(int row)
{
	return bunker_24x18[row];
}

//first erosion state
int bunker_get_bunker_damage0_bits(int row)
{
	return bunkerDamage0_6x6[row];
}

//second erosion state
int bunker_get_bunker_damage1_bits(int row)
{
	return bunkerDamage1_6x6[row];
}

//third erosion state
int bunker_get_bunker_damage2_bits(int row)
{
	return bunkerDamage2_6x6[row];
}

//fourth and last erosion state
int bunker_get_bunker_damage3_bits(int row)
{
	return bunkerDamage3_6x6[row];
}

//get the correct erosion state to use depending on how much youre eroded already
int bunker_get_damage_to_use_bits(int row)
{
	return bunker_damage_to_use[row];
}

//function to draw the bunkers
void bunker_draw(unsigned int * framePointer)
{
    int bunker_x_pos;//tracks position of frame buffer on bunker
    //loop through and draw entire bunker
    for(bunker_x_pos = GLOBALS_LEFT_BUNKER_START_PIXEL; bunker_x_pos < GLOBALS_MAX_X; bunker_x_pos=bunker_x_pos + GLOBALS_BUNKER_PIX_SEPARATION){
        int x, y;
        for(y=0; y < 18; y++){//all 18 y coordinate pixels
    		for(x=0; x < 32; x++){//all 32 x coordinate pixels
    			 if(bunker_get_bunker_bits(y) & (1<<x)){//draw if the pixel is a 1
    				 framePointer[(GLOBALS_BUNKER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + bunker_x_pos + (GLOBALS_DOUBLE*x)] = GLOBALS_GREEN;//draw green at frame pointer
    				 framePointer[(GLOBALS_BUNKER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + bunker_x_pos + (GLOBALS_DOUBLE*x)] = GLOBALS_GREEN;//draw green at frame pointer
    				 framePointer[(GLOBALS_BUNKER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + bunker_x_pos + (GLOBALS_DOUBLE*x)+1] = GLOBALS_GREEN;//draw green at frame pointer
    				 framePointer[(GLOBALS_BUNKER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + bunker_x_pos + (GLOBALS_DOUBLE*x)+1] = GLOBALS_GREEN;//draw green at frame pointer
    			 }
    		}
        }
    }
}

//calculate which section of bunker to erode
void bunker_get_erosion_block(int erosion_block)
{
	//there are 10 possibilities of erosion sections
	switch(erosion_block)
	{
		case 0:// top row	far left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_1;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_1;//save global var as preset constant for x pos
			break;
		case 1:// top row	left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_1;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_2;//save global var as preset constant for x pos
			break;
		case 2:// top row right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_1;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_3;//save global var as preset constant for x pos
			break;
		case 3:// top row	far right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_1;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_4;//save global var as preset constant for x pos
			break;
		case 4://middle row		far left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_2;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_1;//save global var as preset constant for x pos
			break;
		case 5://middle row		left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_2;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_2;//save global var as preset constant for x pos
			break;
		case 6://middle row	right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_2;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_3;//save global var as preset constant for x pos
			break;
		case 7://middle row		far right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_2;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_4;//save global var as preset constant for x pos
			break;
		case 8://bottom row		left
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_3;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_1;//save global var as preset constant for x pos
			break;
		case 9://bottom row 	right
			bunker_erode_y_pos = GLOBALS_ERODE_BLOCK_Y_POS_3;//save global var as preset constant for y pos
			bunker_erode_x_pos = GLOBALS_ERODE_BLOCK_X_POS_4;//save global var as preset constant for x pos
			break;
		default:
			break;
	}
}

//calculate which bunker(1-4) to erode
void bunker_get_erosion_bunker_num(int bunker_number)
{
	//four possibilites of different bunkers
	switch(bunker_number)
	{
		case 0:
			bunker_erode_x_pos = bunker_erode_x_pos;//change x pos depending on which bunker to erode (far left)
			break;
		case 1:
			bunker_erode_x_pos = bunker_erode_x_pos + GLOBALS_BUNKER_PIX_SEPARATION;//change x pos depending on which bunker to erode (left)
			break;
		case 2:
			bunker_erode_x_pos = bunker_erode_x_pos + GLOBALS_BUNKER_PIX_SEPARATION*2;//change x pos depending on which bunker to erode (right)
			break;
		case 3:
			bunker_erode_x_pos = bunker_erode_x_pos + GLOBALS_BUNKER_PIX_SEPARATION*3;//change x pos depending on which bunker to erode (far right)
			break;
		default:
			break;
	}
}

//calculate what the next state of erosion needs to be
void bunker_get_erosion_state(int erosion_state)
{
	//four possibilites for which erosion state
	switch(erosion_state)
	{
		case 0://first erosion
		{
			int i;
			for(i=0; i<6; i++){
				bunker_damage_to_use[i] = bunkerDamage0_6x6[i];//save bits of correct erosion state
			}
			break;
		}
		case 1://second erosion
		{
			int i;
			for(i=0; i<6; i++){
				bunker_damage_to_use[i] = bunkerDamage1_6x6[i];//save bits of correct erosion state
			}
			break;
		}
		case 2://third erosion state
		{
			int i;
			for(i=0; i<6; i++){
				bunker_damage_to_use[i] = bunkerDamage2_6x6[i];//save bits of correct erosion state
			}
			break;
		}
		case 3://final erosion state
		{
			int i;
			for(i=0; i<6; i++){
				bunker_damage_to_use[i] = bunkerDamage3_6x6[i];//save bits of correct erosion state
			}
			break;
		}
		default:
			break;
	}
}


//draw the appropriate erosion state at correct section and bunker
void bunker_erode(unsigned int * framePointer, int bunker_number)
{
	int erosion_block = bunker_erosion_block_state[bunker_number]/BUNKER_COLS;
	if (erosion_block >= 10)
		return;

	bunker_get_erosion_block(erosion_block);//get correct erosion section
	bunker_get_erosion_bunker_num(bunker_number);//get correct bunker(1-4)
	bunker_get_erosion_state(erosion_state[bunker_number][erosion_block]);//get correct erosion state

    int x, y;
    for(y=0; y < 6; y++){//go through all 6 y coordinates of erosion block
		for(x=0; x < 6; x++){//go through all 6 x coordinates of erosion block
			 if(bunker_get_damage_to_use_bits(y) & (1<<x)){//only draw if pixel is a 1
				 framePointer[(bunker_erode_y_pos+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + bunker_erode_x_pos + (GLOBALS_DOUBLE*x)] = GLOBALS_BLACK;//draw black on erosion block
				 framePointer[(bunker_erode_y_pos+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + bunker_erode_x_pos + (GLOBALS_DOUBLE*x)] = GLOBALS_BLACK;//draw black on erosion block
				 framePointer[(bunker_erode_y_pos+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + bunker_erode_x_pos + (GLOBALS_DOUBLE*x)+1] = GLOBALS_BLACK;//draw black on erosion block
				 framePointer[(bunker_erode_y_pos+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + bunker_erode_x_pos + (GLOBALS_DOUBLE*x)+1] = GLOBALS_BLACK;//draw black on erosion block
			 }
		}
    }
    erosion_state[bunker_number][erosion_block] = erosion_state[bunker_number][erosion_block] + 1;//incremement correct index of 2x2 matrix to get to next erosion state

	bunker_erosion_block_state[bunker_number] += 1;
}

>>>>>>> 46133ae2d6a022a717e89ee90e8959352f12048c
