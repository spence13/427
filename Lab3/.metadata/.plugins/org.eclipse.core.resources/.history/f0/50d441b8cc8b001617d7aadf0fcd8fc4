<<<<<<< HEAD

#include <stdint.h>
#include "stdio.h"
#include "globals.h"



#define SAUCER_BITS_X 16
#define SAUCER_BITS_Y 7

// Packs each horizontal line of the figures into a single 24 bit word.
#define packword16(b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0) \
((b15 << 15) | (b14 << 14) | (b13 << 13) | (b12 << 12) | (b11 << 11) | (b10 << 10) | (b9  << 9 ) | (b8  << 8 ) | \
 (b7  << 7 ) | (b6  << 6 ) | (b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )


//sprite for the mystery saucer
static const uint32_t saucer_16x7[] =
{
packword16(0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0),
packword16(0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0),
packword16(0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0),
packword16(0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0),
packword16(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword16(0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0),
packword16(0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0)
};

static int16_t saucer_x_position = 0; // Top left corner of the tank
uint8_t spawn_at_left_bool = 1;
uint16_t mystery_points = 0;

//function to return bunker bits
static uint32_t saucer_get_sprite_bits(uint8_t row)
{
	return saucer_16x7[row];
}


// Getter function for the global x position
uint16_t saucer_get_saucer_x_position(){
	return saucer_x_position;
}

// Setter function for the global x position
static void saucer_set_saucer_x_position(uint16_t x_pos){
	saucer_x_position = x_pos;
}

void saucer_spawn_randomly(unsigned int * framePointer){
	//spawn at random times
	spawn_at_left_bool = rand()%2;//spawn randomly left or right - srand initialized in main
	mystery_points = ((rand()%6)*10)+50;//spawn random values for killing saucer
	xil_printf("%d"),mystery_points);
	if(spawn_at_left_bool){
		saucer_x_position = GLOBALS_MIN_X - 32;
		saucer_shift_right(framePointer);
	}
	else{
		saucer_x_position = GLOBALS_MAX_X;
		saucer_shift_left(framePointer);
	}
}



//This function will draw a green tank given the framePointer
void saucer_draw(unsigned int * framePointer, uint8_t left_xbit_num, uint8_t right_xbit_num)
{
    int16_t x, y; //Iterators
    for(y=0; y < SAUCER_BITS_Y; y++){ //Loop through the height of the tank
		for(x=left_xbit_num-1; x >=right_xbit_num; x--){ //Loop through the width of the tank
			 if(saucer_get_sprite_bits(y) & (1<<x)){ //If the tank pixel is a 1 at this position, draw a 4 pixel green box
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))] = GLOBALS_RED;//top of saucer at height 40
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))] = GLOBALS_RED;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))+1] = GLOBALS_RED;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))+1] = GLOBALS_RED;
			 }
		}
    }
}

//This function will erase the green tank given the framePointer
static void saucer_erase(unsigned int * framePointer)
{
    int16_t x, y; //Iterators
    for(y=0; y < SAUCER_BITS_Y; y++){ //Loop through the height of the tank
		for(x=SAUCER_BITS_X-1; x >=0; x--){ //Loop through the width of the tank
			 if(saucer_get_sprite_bits(y) & (1<<x)){ //If the tank pixel is a 1 at this position, draw a 4 pixel black box
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))] = GLOBALS_BLACK;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))] = GLOBALS_BLACK;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))+1] = GLOBALS_BLACK;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))+1] = GLOBALS_BLACK;
			 }
		}
    }
}


//This function will shift the tank left a frame, takes the framePointer
void saucer_shift_left(unsigned int * framePointer)
{
	while(saucer_x_position > GLOBALS_MIN_X - 32){
		saucer_erase(framePointer); //Erase the whole tank

		saucer_x_position = saucer_x_position-GLOBALS_SHIFT_VAL; //Shift the pointer position left
		if (saucer_x_position >= GLOBALS_MAX_X-32){ //Make sure we don't pass the edge of the screen
			uint16_t draw_col = ((saucer_x_position + 32) - 640)/2;
			saucer_draw(framePointer, 16, draw_col+1);
		}
		else if (saucer_x_position <= GLOBALS_MIN_X){ //Make sure we don't pass the edge of the screen
			uint16_t draw_col = (32 + saucer_x_position)/2;
			saucer_draw(framePointer, draw_col+1, 0);
		}
		else{
			saucer_draw(framePointer,16,0); //Redraw tank with new position
		}
		int sleep = 0;
		while(sleep < 200000){
			sleep++;
		}
	}
}

//This function will shift the tank right a frame, takes the framePointer
void saucer_shift_right(unsigned int * framePointer)
{
	while(saucer_x_position < GLOBALS_MAX_X){
		saucer_erase(framePointer); //Erase the whole tank

		saucer_x_position = saucer_x_position+GLOBALS_SHIFT_VAL; //Shift the pointer position left
		if (saucer_x_position <= GLOBALS_MIN_X){ //Make sure we don't pass the edge of the screen
			uint16_t draw_col = (32 + saucer_x_position)/2;
			saucer_draw(framePointer, draw_col+1, 0);
		}
		else if (saucer_x_position >= GLOBALS_MAX_X-32){ //Make sure we don't pass the edge of the screen
			uint16_t draw_col = ((saucer_x_position + 32) - 640)/2;
			saucer_draw(framePointer, 16, draw_col+1);
		}
		else{
			saucer_draw(framePointer, 16,0); //Redraw tank with new position
		}
		int sleep = 0;
		while(sleep < 200000){
			sleep++;
		}
	}
}


=======

#include <stdint.h>
#include "stdio.h"
#include "globals.h"



#define SAUCER_BITS_X 16
#define SAUCER_BITS_Y 7

// Packs each horizontal line of the figures into a single 24 bit word.
#define packword16(b15,b14,b13,b12,b11,b10,b9,b8,b7,b6,b5,b4,b3,b2,b1,b0) \
((b15 << 15) | (b14 << 14) | (b13 << 13) | (b12 << 12) | (b11 << 11) | (b10 << 10) | (b9  << 9 ) | (b8  << 8 ) | \
 (b7  << 7 ) | (b6  << 6 ) | (b5  << 5 ) | (b4  << 4 ) | (b3  << 3 ) | (b2  << 2 ) | (b1  << 1 ) | (b0  << 0 ) )


//sprite for the mystery saucer
static const uint32_t saucer_16x7[] =
{
packword16(0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0),
packword16(0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0),
packword16(0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0),
packword16(0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0),
packword16(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
packword16(0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0),
packword16(0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0)
};

static int16_t saucer_x_position = 0; // Top left corner of the tank
uint8_t spawn_at_left_bool = 1;
uint16_t mystery_points = 0;

//function to return bunker bits
static uint32_t saucer_get_sprite_bits(uint8_t row)
{
	return saucer_16x7[row];
}


// Getter function for the global x position
uint16_t saucer_get_saucer_x_position(){
	return saucer_x_position;
}

// Setter function for the global x position
static void saucer_set_saucer_x_position(uint16_t x_pos){
	saucer_x_position = x_pos;
}

void saucer_spawn_randomly(unsigned int * framePointer){
	//spawn at random times
	spawn_at_left_bool = rand()%2;//spawn randomly left or right - srand initialized in main
	mystery_points = ((rand()%6)*10)+50;//spawn random values for killing saucer
	xil_printf("%d"),mystery_points);
	if(spawn_at_left_bool){
		saucer_x_position = GLOBALS_MIN_X - 32;
		saucer_shift_right(framePointer);
	}
	else{
		saucer_x_position = GLOBALS_MAX_X;
		saucer_shift_left(framePointer);
	}
}



//This function will draw a green tank given the framePointer
void saucer_draw(unsigned int * framePointer, uint8_t left_xbit_num, uint8_t right_xbit_num)
{
    int16_t x, y; //Iterators
    for(y=0; y < SAUCER_BITS_Y; y++){ //Loop through the height of the tank
		for(x=left_xbit_num-1; x >=right_xbit_num; x--){ //Loop through the width of the tank
			 if(saucer_get_sprite_bits(y) & (1<<x)){ //If the tank pixel is a 1 at this position, draw a 4 pixel green box
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))] = GLOBALS_RED;//top of saucer at height 40
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))] = GLOBALS_RED;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))+1] = GLOBALS_RED;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))+1] = GLOBALS_RED;
			 }
		}
    }
}

//This function will erase the green tank given the framePointer
static void saucer_erase(unsigned int * framePointer)
{
    int16_t x, y; //Iterators
    for(y=0; y < SAUCER_BITS_Y; y++){ //Loop through the height of the tank
		for(x=SAUCER_BITS_X-1; x >=0; x--){ //Loop through the width of the tank
			 if(saucer_get_sprite_bits(y) & (1<<x)){ //If the tank pixel is a 1 at this position, draw a 4 pixel black box
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))] = GLOBALS_BLACK;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))] = GLOBALS_BLACK;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y))*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))+1] = GLOBALS_BLACK;
				 framePointer[(GLOBALS_SAUCER_Y_POS+(GLOBALS_DOUBLE*y)+1)*GLOBALS_MAX_X + saucer_x_position + (GLOBALS_DOUBLE*(SAUCER_BITS_X-x))+1] = GLOBALS_BLACK;
			 }
		}
    }
}


//This function will shift the tank left a frame, takes the framePointer
void saucer_shift_left(unsigned int * framePointer)
{
	while(saucer_x_position > GLOBALS_MIN_X - 32){
		saucer_erase(framePointer); //Erase the whole tank

		saucer_x_position = saucer_x_position-GLOBALS_SHIFT_VAL; //Shift the pointer position left
		if (saucer_x_position >= GLOBALS_MAX_X-32){ //Make sure we don't pass the edge of the screen
			uint16_t draw_col = ((saucer_x_position + 32) - 640)/2;
			saucer_draw(framePointer, 16, draw_col+1);
		}
		else if (saucer_x_position <= GLOBALS_MIN_X){ //Make sure we don't pass the edge of the screen
			uint16_t draw_col = (32 + saucer_x_position)/2;
			saucer_draw(framePointer, draw_col+1, 0);
		}
		else{
			saucer_draw(framePointer,16,0); //Redraw tank with new position
		}
		int sleep = 0;
		while(sleep < 200000){
			sleep++;
		}
	}
}

//This function will shift the tank right a frame, takes the framePointer
void saucer_shift_right(unsigned int * framePointer)
{
	while(saucer_x_position < GLOBALS_MAX_X){
		saucer_erase(framePointer); //Erase the whole tank

		saucer_x_position = saucer_x_position+GLOBALS_SHIFT_VAL; //Shift the pointer position left
		if (saucer_x_position <= GLOBALS_MIN_X){ //Make sure we don't pass the edge of the screen
			uint16_t draw_col = (32 + saucer_x_position)/2;
			saucer_draw(framePointer, draw_col+1, 0);
		}
		else if (saucer_x_position >= GLOBALS_MAX_X-32){ //Make sure we don't pass the edge of the screen
			uint16_t draw_col = ((saucer_x_position + 32) - 640)/2;
			saucer_draw(framePointer, 16, draw_col+1);
		}
		else{
			saucer_draw(framePointer, 16,0); //Redraw tank with new position
		}
		int sleep = 0;
		while(sleep < 200000){
			sleep++;
		}
	}
}


>>>>>>> 46133ae2d6a022a717e89ee90e8959352f12048c
