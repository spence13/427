#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xparameters.h"
#include "xaxivdma.h"
#include "xio.h"
#include "time.h"
#include "unistd.h"
#include "tank.h"
#include "bullet.h"
#include "bunker.h"
#include "stats.h"
#include "aliens.h"
#include "saucer.h"
#include "globals.h"
#include "end.h"
#include "xgpio.h"          // Provides access to PB GPIO driver.
#include "mb_interface.h"   // provides the microblaze interrupt enables, etc.
#include "xintc_l.h"        // Provides handy macros for the interrupt controller.
#include "sounds.h"
#include "xac97_l.h"
#include "pit.h"

#define DEBUG
void print(char *str);

#define FRAME_BUFFER_0_ADDR 0xC1000000  // Starting location in DDR where we will store the images that we display.
#define PB_INTERRUPT_VAL 0xFFFFFFFF
#define MAX_ALIEN_DELAY 60
#define MAX_ALIEN_BULLET_WAIT 500//100
#define MIN_ALIEN_BULLET_WAIT 300//20
#define ALIEN_BULLET_START 500
#define MAX_BULLET_DELAY 2
#define MAX_SCORE_DELAY 50
#define ALIEN_MAX_EXPLOSION 15
#define TANK_DYING_GUISE 8
#define TANK_DYING_ANIMATION 64
#define SAUCER_UPDATE_INTERVAL 8
#define MIN_SAUCER_SPAWN_INTERVAL 500
#define MAX_DEBOUNCE 5 // 5 x 10 ms = 50 ms debounce time
#define DECREMENT_TOO_FAR 255 // When we decrement an unsigned 8-bit past 0 it goes here to 255
#define MIDDLE_BTN_MASK 1 // The bit for the middle button
#define RIGHT_BTN_MASK 2 // The bit for the right button
#define LEFT_BTN_MASK 8 // The bit for the left button
#define BOTTOM_BTN_MASK 4 // The bit for the bottom button
#define TOP_BTN_MASK 16
#define MAX_SILLY_TIMER 2000000
#define MAX_VOLUME 7967
#define VOLUME_INC 50
#define SAUCER_HIT 2
#define ALIEN_MARCH1 1
#define ALIEN_MARCH2 2
#define ALIEN_MARCH3 3
#define ALIEN_MARCH4 4


XGpio gpLED;  // This is a handle for the LED GPIO block.
XGpio gpPB;   // This is a handle for the push-button GPIO block.

uint16_t currentButtonState = 0; // This holds the most current value of the buttons being pressed

uint16_t alien_counter = 0; // This counts the ms until its time to move the aliens
uint16_t bullet_counter = 0; // This counts the ms until its time to move the bullets

uint16_t left_counter = 0; // This counts the ms that the left button is pressed
uint16_t right_counter = 0; // This counts the ms that the right button is pressed
uint16_t middle_counter = 0; // This counts the ms that the middle button is pressed

uint16_t alien_bullet_random_wait = 1000; //Counts the number of ms until firing next random alien bullet
uint16_t alien_bullet_counter = 0; //Count the number of ms the bullet waits until update

uint16_t saucer_spawn_counter = 0;//how often the saucer spawns
uint16_t saucer_spawn_interval = 1000;//this will be set to random values to mark spawning times
uint16_t saucer_update_counter = 0;//how often the saucer is updated

uint16_t erase_score_delay = 0;//delay between when the mystery saucer score is drawn and erased
uint8_t erase_score_bool = 0;//signal that the saucer has been hit and mystery score needs to be erased

uint8_t tank_dying1_bool = 0;//indicates if the guise animation is in progress
uint8_t tank_dying2_bool = 0;//indicates if the guise animation is in progress
uint8_t draw_dying1_counter = 0;//draw first guise of tank death animation
uint8_t draw_dying2_counter = 0;//draw second guise of tank death animation
uint8_t erase_dying1_counter = 0;//erase first guise of tank death animation
uint8_t erase_dying2_counter = 0;//erase second guise of tank death animation
uint16_t tank_dying_counter = 0;//how the long the animation will run for, flipping between the two guises
uint8_t alien_explosion_counter = 0; //Count the number of ms the alien explosion will last
uint8_t alien_exploded = 0; //Bool to keep track of whether an alien has exploded or not

uint8_t game_pause_bool = 0;//indicates whether or not you need to stop listening to interrupts if the game is over

uint8_t invader_switch = 1;//used to iterate through the 4 alien marching sounds
int16_t master_volume = 0;//used to adjust the volume of the game


unsigned int * framePointer; //Global pointing to the framePointer

// This is invoked in response to a timer interrupt.
void timer_interrupt_handler() {
	////////////////////////////////////////////
	alien_counter++; // Increment the ms counter for seconds
	if(alien_counter == MAX_ALIEN_DELAY){ // If we have reached 100 x 10 ms = 1 sec
		update_alien_pos(framePointer); // Move the aliens every second
		if(invader_switch == ALIEN_MARCH1){
			sound_set_sample_size(SOUND_ALIEN_MARCH1);//make the first alien march sound
			invader_switch++;//increment to get the next sound in sequence
		}
		else if(invader_switch == ALIEN_MARCH2){
			sound_set_sample_size(SOUND_ALIEN_MARCH2);//make the second alien march sound
			invader_switch++;//increment to get the next sound in sequence
		}
		else if(invader_switch == ALIEN_MARCH3){
			sound_set_sample_size(SOUND_ALIEN_MARCH3);//make the third alien march sound
			invader_switch++;//increment to get the next sound in sequence
		}
		else if(invader_switch == ALIEN_MARCH4){
			sound_set_sample_size(SOUND_ALIEN_MARCH4);//make the fourth alien march sound
			invader_switch = 1;//go back to first sound so the loop always continues
		}
		if (aliens_hit_bottom(framePointer)){
			XAC97_ClearFifos(XPAR_AXI_AC97_0_BASEADDR); // Clear FIFOs
			game_pause_bool = 1;//setting this to 1 does not allow handlers to be called so game is "paused" after 3 lives taken
			end_clear_screen(framePointer);//black out the entire screen
			end_draw_game_word(framePointer);//print the word "game"
			end_draw_over_word(framePointer);//print the word "over"
			exit(0);
		}
		alien_counter = 0; // Reset the counter for seconds
	}
	////////////////////////////////////////////
	if (alien_exploded) //If an alien explosion has occurred
	{
		alien_explosion_counter++; //Increment ms counter
		if (alien_explosion_counter == ALIEN_MAX_EXPLOSION) //If the explosion has been displayed long enough
		{
			erase_alien_explosion(framePointer); //Erase the explosion
			alien_explosion_counter = 0; //Reset counter
			alien_exploded = 0; //Reset boolean
		}
	}
	////////////////////////////////////////////
	bullet_counter++; // Increment the ms counter for seconds
	if(bullet_counter == MAX_BULLET_DELAY){ // If we have reached 100 x 10 ms = 1 sec
		if(bullet_get_is_fired()){//only update the bullet if a bullet exists
			uint8_t bullet_return = bullet_update_pos(framePointer);//update_all_bullets()
			if(bullet_return == SAUCER_HIT){//if the bullet hit the saucer the mystery score will need to be erased
				sound_set_sample_size(SOUND_UFO_HIGH); //initialize the ufo hit sound
				erase_score_bool = 1;//signal that the saucer has been hit and mystery score needs to be erased
				erase_score_delay = 0;//set counter to zero
			}
			else if (bullet_return == 1) //If bullet hit an alien
			{
				alien_exploded = 1; //Set bool true
				if (aliens_all_dead()) //Check if all aliens have been killed
				{
					XAC97_ClearFifos(XPAR_AXI_AC97_0_BASEADDR); // Clear FIFOs
					game_pause_bool = 1;//setting this to 1 does not allow handlers to be called so game is "paused" after 3 lives taken
					end_clear_screen(framePointer);//black out the entire screen
					end_draw_game_word(framePointer);//print the word "game"
					end_draw_over_word(framePointer);//print the word "over"
					exit(0);
				}
			}
			else
				alien_exploded = 0; //Reset bool
		}
		uint8_t alien_bullet_return = update_alien_bullets(framePointer);//update the alien bullets
		if((alien_bullet_return == 1) && (tank_dying1_bool == 0) && (tank_dying2_bool == 0)){//if tank was hit. it either bools are one then it means the tank is already dying
			sound_set_sample_size(SOUND_TANK_HIT); //initialize the tank hit sound
			if(tank_get_lives_remaining() <= 0){//if you have been killed three times and are out of lives
				XAC97_ClearFifos(XPAR_AXI_AC97_0_BASEADDR); // Clear FIFOs
				game_pause_bool = 1;//setting this to 1 does not allow handlers to be called so game is "paused" after 3 lives taken
				end_clear_screen(framePointer);//black out the entire screen
				end_draw_game_word(framePointer);//print the word "game"
				end_draw_over_word(framePointer);//print the word "over"
				exit(0);
			}
			tank_dying1_bool = 1;//setting this bool to 1 allows the animation sequence to be entered
			tank_dying_counter = 0;//this counter tracks the length of the entire dying animation
			draw_dying1_counter = 0;///set counter to zero to start the first dying guise
		}
		bullet_counter = 0; // Reset the counter for seconds
	}
	////////////////////////////////////////////
	if(currentButtonState & BOTTOM_BTN_MASK){//decrease the volume
		master_volume += VOLUME_INC;//decrease volume by incrememnts of 50
		if(master_volume > MAX_VOLUME)//cutoff at max vol
		{
			master_volume = MAX_VOLUME;//maximum is 1f1f
		}
		sound_change_vol(master_volume);//call function to set the volume
	}
	////////////////////////////////////////////
	if(currentButtonState & TOP_BTN_MASK){//increase the volume
		master_volume -= VOLUME_INC;//increase the volume by increments of 50
		if(master_volume < 0)//make sure the lowest this value can go is zero
		{
			master_volume = 0;//minimum is zero
		}
		sound_change_vol(master_volume);//call function to set the volume
	}
	////////////////////////////////////////////
	if((currentButtonState & MIDDLE_BTN_MASK)){ // If the middle or bottom button has been pressed and the tank isnt in the middle of dying, increment the middle_counter
		if(!bullet_get_is_fired() && (tank_dying1_bool == 0) && (tank_dying2_bool == 0))//only fire if bullet doesnt already exist
		{
			bullet_draw(framePointer);//fire_tank_bullet();
			sound_set_sample_size(SOUND_TANK_SHOOT); //initialize the tank bullet sound
		}
	}
	////////////////////////////////////////////
	if((currentButtonState & LEFT_BTN_MASK) && (tank_dying1_bool == 0) && (tank_dying2_bool == 0)){ // If the left button has been pressed and the tank isnt in the middle of dying, increment the left_counter
		left_counter++;
		if (left_counter == MAX_DEBOUNCE){ // If the left counter has reached 50 ms, reset the counter and increment hours
			left_counter = 0;
			tank_shift_left(framePointer); //shift tank to the left
		}
	}
	else	// Reset the counter and button value if button is released
		left_counter = 0;
	////////////////////////////////////////////
	if((currentButtonState & RIGHT_BTN_MASK)  && (tank_dying1_bool == 0) && (tank_dying2_bool == 0)){ // If the right button has been pressed and the tank isnt in the middle of dying, increment the right_counter
		right_counter++;
		if (right_counter == MAX_DEBOUNCE){ // If the right counter has reached 50 ms, reset the counter and increment seconds
			right_counter = 0;
			tank_shift_right(framePointer);//shift tank to the right
		}
	}
	else // Reset the counter and button value if button is released
		right_counter = 0;
	//length of time the mystery saucer score is shown////////////////////////////////////////////
	erase_score_delay++;//always increment the counter for erasing the mystery score
	if((erase_score_delay == MAX_SCORE_DELAY) && (erase_score_bool == 1)){//if counter has reached max value and the bool is 1 indicating score needs to be erased
		erase_score_bool = 0;//lower flag that score needs to be erased
		erase_score_delay = 0;//reset counter
		saucer_erase_mystery_score(framePointer);//erase the saucer score number after some time
	}
	//draw tank dying guise 1//////////////////////////////////////////
	draw_dying1_counter++;//always increment counter for draw guise1
	if((draw_dying1_counter == TANK_DYING_GUISE) && (tank_dying1_bool == 1)){//if counter has expired and bool is set
		tank_dying1_draw(framePointer);//draw the first guise
		erase_dying1_counter = 0;//all animation to enter next stage (erasing guise 1)
	}
	//erase tank dying guise 1//////////////////////////////////////////
	erase_dying1_counter++;//always increment counter for erase guise1
	if((erase_dying1_counter == TANK_DYING_GUISE) && (tank_dying1_bool == 1)){//if counter has expired and bool is set
		tank_dying1_erase(framePointer);//erase the first guise
		tank_dying1_bool = 0;//you are done with guise 1 so lower flag
		tank_dying2_bool = 1;//set bool cuz you want to enter guise 2 draw erase sequence
		draw_dying2_counter = 0;//all animation to enter next stage (drawing guise 2)
	}
	//draw tank dying guise 2//////////////////////////////////////////
	draw_dying2_counter++;//always increment counter for draw guise2
	if((draw_dying2_counter == TANK_DYING_GUISE) && (tank_dying2_bool == 1)){//if counter has expired and bool is set
		tank_dying2_draw(framePointer);//draw the second guise
		erase_dying2_counter = 0;//all animation to enter next stage (erasing guise 2)
	}
	//erase tank dying guise 2//////////////////////////////////////////
	erase_dying2_counter++;//always increment counter for erase guise2
	if((erase_dying2_counter == TANK_DYING_GUISE) && (tank_dying2_bool == 1)){//if counter has expired and bool is set
		tank_dying2_erase(framePointer);//erase the second guise
		tank_dying1_bool = 1;//set bool cuz you want to enter guise 1 draw erase sequence
		tank_dying2_bool = 0;//lower flag cuz you are done with guise 2 sequence
		draw_dying1_counter = 0;//all animation to enter next stage (drawing guise 1)
	}
	//end of tank dying animation/////////////////////////////////////////
	tank_dying_counter++;//always increment counter
	if(tank_dying_counter == TANK_DYING_ANIMATION){
		tank_dying1_bool = 0;//dont allow the guise1 to be drawn anymore -> this ends the animation
		tank_dying2_bool = 0;//dont allow the guise2 to be drawn anymore -> this ends the animation
		tank_dying1_erase(framePointer);//erase both dying guises just in case
		tank_dying2_erase(framePointer);//erase both dying guises just in case
		tank_draw(framePointer);//draw a new tank
	}
	////////////////////////////////////////////
	alien_bullet_counter++;
	if (alien_bullet_counter == alien_bullet_random_wait){
		alien_bullet_random_wait = (rand() % MAX_ALIEN_BULLET_WAIT) + MIN_ALIEN_BULLET_WAIT;
		alien_bullet_counter = 0;
		fire_alien_bullet(framePointer);
	}
	/////////////////////////////////////////////
	saucer_spawn_counter++;//always increment saucer counter
	if(saucer_spawn_counter == saucer_spawn_interval){//if counter has expired by reaching random value
		saucer_spawn_counter = 0;//reset the counter if ever the counter expires
		saucer_spawn_interval = (rand() % MIN_SAUCER_SPAWN_INTERVAL) + MIN_SAUCER_SPAWN_INTERVAL;//set variable to a random value
		if(!saucer_get_exists_bool()){//only spawn a new saucer if a saucer doesnt already exist
			sound_set_sample_size(SOUND_UFO_LOW); //initialize ufo sound
			saucer_spawn_randomly(framePointer);//spawn the saucer either left or right randomly
		}
	}
	////////////////////////////////////////////
	saucer_update_counter++;//always increment the counte to update saucer position
	if(saucer_update_counter == SAUCER_UPDATE_INTERVAL){//if counter has expired move the saucer
		saucer_update_counter = 0;//reset the counter
		saucer_update_position(framePointer);//move the saucer on the screen by calling the update position function
	}

	//////////////////////////SOUNDS///////////////////////////////
	sound_play_sound();//call the play sounds function for every FIT interrupt
}

// This is invoked each time there is a change in the button state (result of a push or a bounce).
void pb_interrupt_handler() {
  // Clear the GPIO interrupt.
  XGpio_InterruptGlobalDisable(&gpPB);                // Turn off all PB interrupts for now.
  currentButtonState = XGpio_DiscreteRead(&gpPB, 1);  // Get the current state of the buttons.
  // Everything else will be done in the timer_interrupt_handler()
  XGpio_InterruptClear(&gpPB, PB_INTERRUPT_VAL);            // Ack the PB interrupt.
  XGpio_InterruptGlobalEnable(&gpPB);                 // Re-enable PB interrupts.
}

// Main interrupt handler, queries the interrupt controller to see what peripheral
// fired the interrupt and then dispatches the corresponding interrupt handler.
// This routine acks the interrupt at the controller level but the peripheral
// interrupt must be ack'd by the dispatched interrupt handler.
// Question: Why is the timer_interrupt_handler() called after ack'ing the interrupt controller
// but pb_interrupt_handler() is called before ack'ing the interrupt controller?
void interrupt_handler_dispatcher(void* ptr) {
	int intc_status = XIntc_GetIntrStatus(XPAR_INTC_0_BASEADDR);
	// Check the PIT interrupt first.
	if (intc_status & XPAR_PIT_0_INTERRUPTOUTPUT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PIT_0_INTERRUPTOUTPUT_MASK);
		if(game_pause_bool == 0)
			timer_interrupt_handler();
	}
	// Check the push buttons.
	if (intc_status & XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK);
		if(game_pause_bool == 0)
			pb_interrupt_handler();
	}

	// Check AC97 interrupts
	if (intc_status & XPAR_AXI_AC97_0_INTERRUPT_MASK){
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_AXI_AC97_0_INTERRUPT_MASK);
	}

	// Check NES controller interrupts
	if (intc_status & XPAR_NES_CONTROLLER_0_NES_INTERRUPT_MASK)
	{
		XIntc_AckIntr(XPAR_INTC_0_BASEADDR, XPAR_NES_CONTROLLER_0_NES_INTERRUPT_MASK);

		int x = XIo_In32(XPAR_NES_CONTROLLER_0_BASEADDR);
		xil_printf("NES: %d\n\r", x);
	}
}

void delay()
{
    int silly_timer=0;
   	 while(silly_timer != MAX_SILLY_TIMER)
   		 silly_timer++;
}

int main()
{
	init_platform();                   // Necessary for all programs.
	int Status;                        // Keep track of success/failure of system function calls.
	XAxiVdma videoDMAController;
	// There are 3 steps to initializing the vdma driver and IP.
	// Step 1: lookup the memory structure that is used to access the vdma driver.
    XAxiVdma_Config * VideoDMAConfig = XAxiVdma_LookupConfig(XPAR_AXI_VDMA_0_DEVICE_ID);
    // Step 2: Initialize the memory structure and the hardware.
    if(XST_FAILURE == XAxiVdma_CfgInitialize(&videoDMAController, VideoDMAConfig,	XPAR_AXI_VDMA_0_BASEADDR)) {
    	xil_printf("VideoDMA Did not initialize.\r\n");
    }
    // Step 3: (optional) set the frame store number.
    if(XST_FAILURE ==  XAxiVdma_SetFrmStore(&videoDMAController, 2, XAXIVDMA_READ)) {
    	xil_printf("Set Frame Store Failed.");
    }
    // Initialization is complete at this point.

    // Setup the frame counter. We want two read frames. We don't need any write frames but the
    // function generates an error if you set the write frame count to 0. We set it to 2
    // but ignore it because we don't need a write channel at all.
    XAxiVdma_FrameCounter myFrameConfig;
    myFrameConfig.ReadFrameCount = 2;
    myFrameConfig.ReadDelayTimerCount = 10;
    myFrameConfig.WriteFrameCount =2;
    myFrameConfig.WriteDelayTimerCount = 10;
    Status = XAxiVdma_SetFrameCounter(&videoDMAController, &myFrameConfig);
    if (Status != XST_SUCCESS) {
	   xil_printf("Set frame counter failed %d\r\n", Status);
	   if(Status == XST_VDMA_MISMATCH_ERROR)
		   xil_printf("DMA Mismatch Error\r\n");
    }
    // Now we tell the driver about the geometry of our frame buffer and a few other things.
    // Our image is 480 x 640.
    XAxiVdma_DmaSetup myFrameBuffer;
    myFrameBuffer.VertSizeInput = 480;    // 480 vertical pixels.
    myFrameBuffer.HoriSizeInput = 640*4;  // 640 horizontal (32-bit pixels).
    myFrameBuffer.Stride = 640*4;         // Dont' worry about the rest of the values.
    myFrameBuffer.FrameDelay = 0;
    myFrameBuffer.EnableCircularBuf=1;
    myFrameBuffer.EnableSync = 0;
    myFrameBuffer.PointNum = 0;
    myFrameBuffer.EnableFrameCounter = 0;
    myFrameBuffer.FixedFrameStoreAddr = 0;
    if(XST_FAILURE == XAxiVdma_DmaConfig(&videoDMAController, XAXIVDMA_READ, &myFrameBuffer)) {
    	xil_printf("DMA Config Failed\r\n");
     }
    // We need to give the frame buffer pointers to the memory that it will use. This memory
    // is where you will write your video data. The vdma IP/driver then streams it to the HDMI
    // IP.
     myFrameBuffer.FrameStoreStartAddr[0] = FRAME_BUFFER_0_ADDR;
     myFrameBuffer.FrameStoreStartAddr[1] = FRAME_BUFFER_0_ADDR + 4*640*480;

     if(XST_FAILURE == XAxiVdma_DmaSetBufferAddr(&videoDMAController, XAXIVDMA_READ,
    		               myFrameBuffer.FrameStoreStartAddr)) {
    	 xil_printf("DMA Set Address Failed Failed\r\n");
     }
     // Now, let's get ready to start displaying some stuff on the screen.
     // The variables framePointer and framePoi8nter1 are just pointers to the base address
     // of frame 0 and frame 1.
     framePointer = (unsigned int *) FRAME_BUFFER_0_ADDR;
     int row=0, col=0;
     for( row=0; row<GLOBALS_MAX_Y; row++)
     {
    	 for(col=0; col<GLOBALS_MAX_X; col++)
    		 framePointer[row*GLOBALS_MAX_X + col] = 0; //Clear screen for the first and only time
     }

     // This tells the HDMI controller the resolution of your display (there must be a better way to do this).
     XIo_Out32(XPAR_AXI_HDMI_0_BASEADDR, 640*480);

     // Start the DMA for the read channel only.
     if(XST_FAILURE == XAxiVdma_DmaStart(&videoDMAController, XAXIVDMA_READ)){
    	 xil_printf("DMA START FAILED\r\n");
     }
     int frameIndex = 0;
     // We have two frames, let's park on frame 0. Use frameIndex to index them.
     // Note that you have to start the DMA process before parking on a frame.
     if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ)) {
    	 xil_printf("vdma parking failed\n\r");
     }

     update_alien_pos(framePointer); // Draw aliens for the first time
     tank_draw(framePointer); // Draw tank for the first time
     tank_draw_bottom_line(framePointer); // Draw the green line below the tank
     bunker_draw(framePointer); // Draw the bunkers
     stats_draw_score_word(framePointer); // Draw initial score
     stats_draw_lives_word(framePointer); // Draw lives word
     stats_draw_lives_tank(framePointer,1); // Draw first tank life
     stats_draw_lives_tank(framePointer,2); // Draw second tank life
     stats_draw_lives_tank(framePointer,3); // Draw third tank life
     srand(time(NULL));
     alien_bullet_random_wait = ALIEN_BULLET_START;
 	////////////////////////////////////FROM LAB 2//////////////////////////////
     int success;
     //print("hello world\n\r");
     success = XGpio_Initialize(&gpPB, XPAR_PUSH_BUTTONS_5BITS_DEVICE_ID);
     // Set the push button peripheral to be inputs.
     XGpio_SetDataDirection(&gpPB, 1, 0x0000001F);
     // Enable the global GPIO interrupt for push buttons.
     XGpio_InterruptGlobalEnable(&gpPB);
     // Enable all interrupts in the push button peripheral.
     XGpio_InterruptEnable(&gpPB, 0xFFFFFFFF);

     microblaze_register_handler(interrupt_handler_dispatcher, NULL);
     XIntc_EnableIntr(XPAR_INTC_0_BASEADDR,
     		(XPAR_PIT_0_INTERRUPTOUTPUT_MASK | XPAR_PUSH_BUTTONS_5BITS_IP2INTC_IRPT_MASK | XPAR_AXI_AC97_0_INTERRUPT_MASK | XPAR_NES_CONTROLLER_0_NES_INTERRUPT_MASK));
     XIntc_MasterEnable(XPAR_INTC_0_BASEADDR);
     microblaze_enable_interrupts();
     //microblaze_disable_interrupts();
     //////////////////////////////////////////////////////////////////////////////
     //Print out a menu on the UART for convenience
     xil_printf("Enter number of clock cycles between interrupts: \n\r");
     sound_init(); //initialize sound codec and registers
     pit_init(); //initialize PIT
     while (1) {
    	 pit_set_delay_value();


 		int x = XIo_In32(XPAR_NES_CONTROLLER_0_BASEADDR);
 		xil_printf("NES: %d\n\r", x);

 		delay();

         if (XST_FAILURE == XAxiVdma_StartParking(&videoDMAController, frameIndex,  XAXIVDMA_READ))
        	 xil_printf("vdma parking failed\n\r");
     }
     cleanup_platform();

    return 0;
}
